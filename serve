#!/usr/bin/python

"""
connect to an outlook exchange web server to find the first meeting of
tomorrow, so I know when to get to work
"""

import os, re, datetime
from twisted.python import log
from twisted.internet import reactor
from rdflib.Graph import Graph
from rdflib import Namespace, URIRef, Literal
import cyclone.web
from web.contrib.template import render_genshi
import outlookcalendar
EM = Namespace("http://bigasterisk.com/exchangeMeeting/")
render = render_genshi(["template"])

def firstMeeting(meetings):
    """starttime, description of the first meeting that's not canceled"""
    for start, end, desc in meetings:
        if desc.startswith('Canceled:'):
            continue
        desc = re.sub('^Updated: ', '', desc)

        return (start, desc)
        break
    return "", "no meetings found"

def nextDay():
    """y,m,d for the upcoming day; day changes at 19:00"""
    now = datetime.datetime.now()
    if now.hour > 19:
        now += datetime.timedelta(1)
    return now.year, now.month, now.day

def havePassword(config, top):
    return bool(config.value(top, EM['password']))

def setPassword(config, top, passwd):
    config.add((top, EM['password'], Literal(passwd)))

def absRedirect(handler, path):
    return handler.redirect(handler.request.headers.get('X-Site-Root') + path)

class NextMeeting(cyclone.web.RequestHandler):
    def get(self):
        s = self.settings
        if not havePassword(s.config, s.top):
            return absRedirect(self, "needLogin")
        
        ymd = nextDay()
        day = datetime.date(*ymd)

        html = outlookcalendar.getCalendar(s.config, s.top, ymd)
        meetings = outlookcalendar.parse(html)
        start, desc = firstMeeting(meetings)

        self.write(render.nextmeeting(
            date=day.strftime("%A, %Y-%m-%d"),
            meetTime=start,
            desc=desc,
            ))

class AllMeetings(cyclone.web.RequestHandler):
    def get(self):
        s = self.settings
        if not havePassword(s.config, s.top):
            return absRedirect(self, "needLogin")

        ymd = nextDay()
        day = datetime.date(*ymd)

        html = outlookcalendar.getCalendar(s.config,
                                           s.top, ymd)
        meetings = outlookcalendar.parse(html)

        # show current time, cull completed meetings, etc
        self.write(render.allmeetings(
            day=day.isoformat(),
            meetings=meetings,
            ))

class NeedLogin(cyclone.web.RequestHandler):
    def get(self):
        s = self.settings
        self.write(render.needpassword(
            user=s.config.value(s.top, EM['user']),
            ))

    def post(self):
        s = self.settings
        setPassword(s.config, s.top, self.get_argument("passwd"))
        return absRedirect(self, "all")

class Application(cyclone.web.Application):
    def __init__(self, config, top):
        handlers = [
            (r"/", NextMeeting),
            (r"/all", AllMeetings),
            (r"/needLogin", NeedLogin),
        ]

        settings = {
            "static_path": "./static",
            "config" : config,
            "top" : top,
        }

        cyclone.web.Application.__init__(self, handlers, **settings)

config = Graph()
top = URIRef("file://" + os.path.abspath("config.n3"))
config.parse(top, format="n3")

#log.startLogging(sys.stdout)
reactor.listenTCP(9076, Application(config, top))
reactor.run()
