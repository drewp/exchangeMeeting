#!/usr/bin/python

"""
connect to an outlook exchange web server to find the first meeting of
tomorrow, so I know when to get to work
"""

import sys, os, re, pprint, getpass, datetime, time
from twisted.python import log
from twisted.internet import reactor, defer
from twisted.internet.defer import inlineCallbacks, returnValue
from twisted.web.client import getPage
from twisted.web import http
from BeautifulSoup import BeautifulSoup
from rdflib.Graph import Graph
from rdflib import Namespace, URIRef, Literal
from nevow import appserver, loaders, rend, tags as T, static, inevow
import outlookcalendar
EM = Namespace("http://bigasterisk.com/exchangeMeeting/")

def firstMeeting(meetings):
    """starttime, description of the first meeting that's not canceled"""
    for start, end, desc in meetings:
        if desc.startswith('Canceled:'):
            continue
        desc = re.sub('^Updated: ', '', desc)

        return (start, desc)
        break
    return "", "no meetings found"

def nextDay():
    """y,m,d for the upcoming day; day changes at 19:00"""
    now = datetime.datetime.now()
    if now.hour > 19:
        now += datetime.timedelta(1)
    return now.year, now.month, now.day


def unauthorized(request):
    request.setHeader('WWW-Authenticate',
                      'Basic realm="First meeting time"')
    request.setResponseCode(http.UNAUTHORIZED)
    return "Authentication required."

class WithLogin(object):
    def renderHTTP(self, ctx):
        request = inevow.IRequest(ctx)

        auth = (request.getUser(), request.getPassword())

        for siteAuth in self.config.objects(self.top, EM['siteAuth']):
            a = (self.config.value(siteAuth, EM['user']),
                 self.config.value(siteAuth, EM['password']))
            if a == auth:
                break
        else:
            return unauthorized(request)
        
        return rend.Page.renderHTTP(self, ctx)


class Main(WithLogin, rend.Page):
    docFactory = loaders.xmlfile("main.html")
    def __init__(self, config, top):
        self.ymd = nextDay()
        self.day = datetime.date(*self.ymd)
        self.config, self.top = config, top
        self.startDesc = None

    def child_(self, ctx):
        return Main(self.config, self.top)

    def getStartDesc(self):
        if self.startDesc is not None:
            return defer.succeed(self.startDesc)
        
        d = defer.succeed(outlookcalendar.getCalendar(config, top, self.ymd))
        #d = defer.succeed(open("calpage.html").read())
        def withHtml(html):
            meetings = outlookcalendar.parse(html)
            start, desc = firstMeeting(meetings)
            self.startDesc = start, desc
            return self.startDesc
        d.addCallback(withHtml)
        return d

    def render_date(self, ctx, data):
        return self.day.strftime("%A, %Y-%m-%d")

    def render_meetTime(self, ctx, data):
        d = self.getStartDesc()
        @d.addCallback
        def done(startDesc):
            return startDesc[0]
        return d

    def render_desc(self, ctx, data):
        d = self.getStartDesc()
        @d.addCallback
        def done(startDesc):
            return startDesc[1]
        return d

    def child_all(self, ctx):
        return AllMeetings(self.config, self.top)

setattr(Main, 'child_bg.jpg',
        static.File("345009210_1f826cd5a1_b-iphone.jpg"))

class AllMeetings(WithLogin, rend.Page):
    docFactory = loaders.stan([T.h1['All meetings'], T.directive('list')])
    def __init__(self, config, top):
        self.ymd = nextDay()
        self.day = datetime.date(*self.ymd)
        self.config, self.top = config, top

    @inlineCallbacks
    def render_list(self, ctx, data):
        html = yield outlookcalendar.getCalendar(config, top, self.ymd)
        meetings = outlookcalendar.parse(html)
        # show current time, cull completed meetings, etc
        ul = T.ul[[T.li["%s - %s %s" % (m[0], m[1], m[2])] for m in meetings]]

        returnValue([T.div[self.day.isoformat()], ul])
    

config = Graph()
top = URIRef("file://" + os.path.abspath("config.n3"))
config.parse(top, format="n3")

passwd = getpass.getpass("Password for %s: " % config.value(top, EM['user']))
config.add((top, EM['password'], Literal(passwd)))

log.startLogging(sys.stdout)
reactor.listenTCP(9003, appserver.NevowSite(Main(config, top)))
reactor.run()
